<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://swti.github.io</id>
    <title>Notes</title>
    <updated>2020-05-24T15:41:50.969Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://swti.github.io"/>
    <link rel="self" href="https://swti.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://swti.github.io/images/avatar.png</logo>
    <icon>https://swti.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Notes</rights>
    <entry>
        <title type="html"><![CDATA[Version Control]]></title>
        <id>https://swti.github.io/post/version-control/</id>
        <link href="https://swti.github.io/post/version-control/">
        </link>
        <updated>2020-05-24T15:11:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="what-is-version-control">What is Version Control?</h2>
<p>Version Control is a system that records <strong>changes</strong> to a file or a set of files <strong>over time</strong> so that you can recall special versions later.</p>
<h2 id="vcs-version-control-system">VCS (Version Control System)</h2>
<h3 id="local-vcss">Local VCSs</h3>
<figure data-type="image" tabindex="1"><img src="https://swti.github.io/post-images/1590333469795.svg" alt="" loading="lazy"></figure>
<blockquote>
<p>One of the most popular Local VCS tools was a system called <a href="https://www.gnu.org/software/rcs/">RCS</a>, which is still distributed with many computers today.</p>
</blockquote>
<h3 id="centralized-vcss-cvcss">Centralized VCSs (CVCSs)</h3>
<p><strong>why?</strong><br>
To deal with the issue that people need to collaborate with developers on other systems.</p>
<blockquote>
<p>such as CVS, Subversion, and Perforce.</p>
</blockquote>
<p>They have a single server that contains all the versioned files, and a number of clients check out files from that central place. For many years, this has been the standard for version control.<br>
<img src="https://swti.github.io/post-images/1590333498035.svg" alt="" loading="lazy"><br>
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on. If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything — the entire history of the project except whatever single snapshots people happen to have on their local machines. Local VCS systems suffer from this same problem.</p>
<blockquote>
<p><strong>whenever you have the entire history of the project in a single place, you risk losing everything.</strong></p>
</blockquote>
<h3 id="distributed-vcss-dvcss">Distributed VCSs (DVCSs)</h3>
<blockquote>
<p>such as git, Mercurial, Bazaar or Darcs.</p>
</blockquote>
<p>In a DVCSs, clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.<br>
<img src="https://swti.github.io/post-images/1590333515584.svg" alt="" loading="lazy"><br>
Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.</p>
<blockquote>
<p>This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.</p>
</blockquote>
]]></content>
    </entry>
</feed>